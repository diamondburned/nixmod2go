// Code generated by nixmod2go. DO NOT EDIT.
package example

import (
	"encoding/json"
)

// Examples is the struct type for `examples`.
type Examples struct {
	Modules Modules `json:"modules"`
}

// Modules is the struct type for `examples.modules`.
type Modules struct {
	ComplexModule ComplexModule `json:"complexModule"`
}

// ComplexModule is the struct type for `examples.modules.complexModule`.
type ComplexModule struct {
	// Enable: whether to enable example-module.
	Enable bool `json:"enable"`
	// Anything: example anything option.
	Anything any `json:"anything"`
	// Attrs: example attrs option (treated as map[string]any).
	Attrs map[string]any `json:"attrs"`
	// Bool: example boolean option.
	Bool bool `json:"bool"`
	// Either: example either option (int or string).
	Either Either `json:"either"`
	// Enum: example enum option.
	Enum Enum `json:"enum"`
	// Internal: example internal option.
	Internal bool `json:"internal"`
	// Lines: example lines option (treated as string).
	Lines string `json:"lines"`
	// Nullable: example nullable string option.
	Nullable *string `json:"nullable"`
	// NullableSubmodule: example nullable submodule option.
	NullableSubmodule *NullableSubmodule `json:"nullableSubmodule"`
	// Number: example number option.
	Number int `json:"number"`
	// Numbers: example for various ints.* options.
	Numbers Numbers `json:"numbers"`
	// OneOf: example oneOf option (int or string or bool).
	OneOf OneOf `json:"oneOf"`
	// Path: example path option (treated as string).
	Path string `json:"path"`
	// Port: example port number option.
	Port uint16 `json:"port"`
	// String: example string option.
	String string `json:"string"`
	// StringAttrs: map[string]string option.
	StringAttrs map[string]string `json:"stringAttrs"`
	// StringList: list of strings.
	StringList []string `json:"stringList"`
	// Submodule: example submodule option.
	Submodule Submodule `json:"submodule"`
	// SubmoduleList: example list of submodules.
	SubmoduleList []SubmoduleList `json:"submoduleList"`
	// SubmoduleSelfRef: example submodule option that references its own name.
	SubmoduleSelfRef SubmoduleSelfRef `json:"submoduleSelfRef"`
	// Uniq: example unique string option.
	Uniq string `json:"uniq"`
}

// SubmoduleSelfRef is the struct type for `examples.modules.complexModule.submoduleSelfRef`.
type SubmoduleSelfRef struct {
	// CurrentName: name of the submodule.
	CurrentName string `json:"currentName"`
}

// SubmoduleList is the struct type for `examples.modules.complexModule.submoduleList`.
type SubmoduleList struct {
	// Enable: whether to enable submodule-list.
	Enable bool `json:"enable"`
}

// Submodule is the struct type for `examples.modules.complexModule.submodule`.
type Submodule struct {
	// InnerNullable: example nullable string option.
	InnerNullable *string `json:"innerNullable"`
	// InnerString: example string option.
	InnerString string `json:"innerString"`
}

// Numbers is the struct type for `examples.modules.complexModule.numbers`.
type Numbers struct {
	Between  int         `json:"between"`
	Float    float64     `json:"float"`
	Int      int         `json:"int"`
	Number   json.Number `json:"number"`
	Positive uint        `json:"positive"`
	S16      int16       `json:"s16"`
	S32      int32       `json:"s32"`
	S8       int8        `json:"s8"`
	U16      uint16      `json:"u16"`
	U32      uint32      `json:"u32"`
	U8       uint8       `json:"u8"`
	Unsigned uint        `json:"unsigned"`
}

// NullableSubmodule is the struct type for `examples.modules.complexModule.nullableSubmodule`.
type NullableSubmodule struct {
	// Enable: whether to enable nullable-submodule.
	Enable bool `json:"enable"`
}

// Either describes the `either` type for `examples.modules.complexModule.either`.
type Either interface {
	isEither()
}

// EitherInt is one of the types that satisfy [Either].
type EitherInt int

// EitherStr is one of the types that satisfy [Either].
type EitherStr string

func (e EitherInt) isEither() {
}
func (e EitherStr) isEither() {
}

// NewEitherInt constructs a value of type `int` that satisfies [Either].
func NewEitherInt(e int) Either {
	return EitherInt(e)
}

// NewEitherStr constructs a value of type `str` that satisfies [Either].
func NewEitherStr(e string) Either {
	return EitherStr(e)
}

// Enum is the enum type for `examples.modules.complexModule.enum`.
type Enum string

const (
	EnumA Enum = "a"
	EnumB Enum = "b"
	EnumC Enum = "c"
)

// OneOf describes the `either` type for `examples.modules.complexModule.oneOf`.
type OneOf interface {
	isOneOf()
}

// OneOfInt is one of the types that satisfy [OneOf].
type OneOfInt int

// OneOfStr is one of the types that satisfy [OneOf].
type OneOfStr string

// OneOfBool is one of the types that satisfy [OneOf].
type OneOfBool bool

// OneOfAttrs is one of the types that satisfy [OneOf].
type OneOfAttrs map[string]any

func (o OneOfInt) isOneOf() {
}
func (o OneOfStr) isOneOf() {
}
func (o OneOfBool) isOneOf() {
}
func (o OneOfAttrs) isOneOf() {
}

// NewOneOfInt constructs a value of type `int` that satisfies [OneOf].
func NewOneOfInt(o int) OneOf {
	return OneOfInt(o)
}

// NewOneOfStr constructs a value of type `str` that satisfies [OneOf].
func NewOneOfStr(o string) OneOf {
	return OneOfStr(o)
}

// NewOneOfBool constructs a value of type `bool` that satisfies [OneOf].
func NewOneOfBool(o bool) OneOf {
	return OneOfBool(o)
}

// NewOneOfAttrs constructs a value of type `attrs` that satisfies [OneOf].
func NewOneOfAttrs(o map[string]any) OneOf {
	return OneOfAttrs(o)
}
